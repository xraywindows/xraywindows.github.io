<!doctype html>
<html class="no-js" lang="zh-CN">

<head>
        <link rel="canonical" href="https://xraywindows.github.io/news/article-91018.htm" />
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>java8 对LocalDate、localDateTime的操作</title>
        <meta name="description" content="&nbsp;最近项目在做一些报表的统计，对时间的操作比较多，写个工具类记录一下 public class LocalDateUtils {     public static final String" />
        <link rel="icon" href="/assets/website/img/xraywindows/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Xray Windows节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://xraywindows.github.io/news/article-91018.htm" />
    <meta property="og:site_name" content="Xray Windows节点订阅官网" />
    <meta property="og:title" content="java8 对LocalDate、localDateTime的操作" />
    <meta property="og:image" content="https://xraywindows.github.io/uploads/20240815/fa0a6998347f14d880989b2fe3cc4aa6.webp" />
        <meta property="og:release_date" content="2025-04-08T09:53:18" />
    <meta property="og:updated_time" content="2025-04-08T09:53:18" />
        <meta property="og:description" content="&nbsp;最近项目在做一些报表的统计，对时间的操作比较多，写个工具类记录一下 public class LocalDateUtils {     public static final String" />
        
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="manifest" href="site.webmanifest">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="java8 对LocalDate、localDateTime的操作">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- CSS here -->
    <link rel="stylesheet" href="/assets/website/css/xraywindows/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/website/css/xraywindows/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/css/xraywindows/slicknav.css">
    <link rel="stylesheet" href="/assets/website/css/xraywindows/flaticon.css">
    <link rel="stylesheet" href="/assets/website/css/xraywindows/animate.min.css">
    <link rel="stylesheet" href="/assets/website/css/xraywindows/magnific-popup.css">
    <link rel="stylesheet" href="/assets/website/css/xraywindows/fontawesome-all.min.css">
    <link rel="stylesheet" href="/assets/website/css/xraywindows/themify-icons.css">
    <link rel="stylesheet" href="/assets/website/css/xraywindows/slick.css">
    <link rel="stylesheet" href="/assets/website/css/xraywindows/nice-select.css">
    <link rel="stylesheet" href="/assets/website/css/xraywindows/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3W6FX62N6S"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-3W6FX62N6S');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body class="body-bg" data-page="detail">
        <!--? Preloader Start -->
    <div id="preloader-active">
        <div class="preloader d-flex align-items-center justify-content-center">
            <div class="preloader-inner position-relative">
                <div class="preloader-circle"></div>
                <div class="preloader-img pere-text">
                    <img src="/assets/website/img/xraywindows/logo/loder.jpg" alt="">
                </div>
            </div>
        </div>
    </div>
    <header>
        <!-- Header Start -->
        <div class="header-area">
            <div class="main-header ">
                <div class="header-bottom  header-sticky">
                    <div class="container">
                        <div class="row align-items-center">
                            <!-- Logo -->
                            <div class="col-md-4">
                                <div class="logo">
                                    <a href="/">
                                                                        <span>Xray Windows</span>
                                                                        </a>
                                </div>
                            </div>
                            <div class="col-md-8">
                                <div class="menu-wrapper  d-flex align-items-center justify-content-end">
                                    <!-- Main-menu -->
                                    <div class="main-menu d-none d-lg-block">
                                        <nav>
                                            <ul id="navigation">
                                                                                                <li><a href="/">首页</a></li>
                                                                                                <li><a href="/free-nodes/">免费节点</a></li>
                                                                                                <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                                                <li><a href="/client.htm">客户端</a></li>
                                                                                                <li><a href="/news/">新闻资讯</a></li>
                                                                                            </ul>
                                        </nav>
                                    </div>
                                </div>
                            </div>
                            <!-- Mobile Menu -->
                            <div class="col-12">
                                <div class="mobile_menu d-block d-lg-none"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Header End -->
    </header>
    <main>
        <!--? Hero Start -->
        <div class="slider-area2">
            <div class="slider-height2 hero-overly2 d-flex align-items-center">
                <div class="container">
                    <div class="row">
                        <div class="col-xl-12">
                            <div class="hero-cap hero-cap2 text-center">
                                <h1>java8 对LocalDate、localDateTime的操作</h1>
                                <p>
                                    <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!--? Categories Area Start -->
        <div class="categories-area section-padding30">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="htmledit_views"> <p>&nbsp;最近项目在做一些报表的统计，对时间的操作比较多，写个工具类记录一下</p> <pre><code class="language-java">public class LocalDateUtils {     public static final String FORMATTER_YYYYMMDDHHMMSS = "yyyy-MM-dd HH:mm:ss";     public static final String FORMATTER_YYYYMMDDHHMM = "yyyy-MM-dd HH:mm";     public static final String FORMATTER_YYYYMMDD = "yyyy-MM-dd";      /**      * 将Date类型转化为指定格式字符串      * @param date      * @param format      * @return      */     public static String getStringByDate(Date date, String format) {         SimpleDateFormat sdf = new SimpleDateFormat(format);         return sdf.format(date);     }      /**      * 将指定格式的字符串转化为Date      * @param dateStr      * @param format      * @return      */     public static Date getDateByString(String dateStr, String format) {         SimpleDateFormat sdf = new SimpleDateFormat(format);         try {             return sdf.parse(dateStr);         } catch (ParseException e) {             e.printStackTrace();             return null;         }     }      /**      * 获取当前Date并转化为指定格式字符串      * @param format      * @return      */     public static String getCurrentDate(String format) {         return getStringByDate(new Date(), format);     }      /**      * 将Date转化为LocalDateTime      * @param date      * @return      */     public static LocalDateTime getLocalDateTime(Date date) {         return LocalDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());     }      /**      * 将LocalDateTime转化为Date      * @param localDateTime      * @return      */     public static Date getDataByLocalDateTime(LocalDateTime localDateTime) {         return Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());     }      /**      * 比较两个LocalDate的时间大小      * @param localDate      * @return 比较当前对象和other对象在时间上的大小，返回值如果为正，则当前对象时间较晚      */     public static int getLocalDateTime(LocalDate localDate) {         return LocalDate.now().compareTo(localDate);     }      /**      * 比较两个Date的时间大小      * @param date      * @param date2      * @return      */     public static boolean getLocalDateTime(Date date, Date date2) {         if (date.compareTo(date2) == 1) {             return true;         }         return false;     }      /**      * 将LocalDateTime转化为指定格式字符串      * @param localDateTime      * @param format      * @return      */     public static String getStringByLocalDateTime(LocalDateTime localDateTime, String format) {         return localDateTime.format(DateTimeFormatter.ofPattern(format));     }      /**      * 将指定格式String类型日期转化为LocalDateTime      * @param format      * @param localDateTime      * @return      */     public static LocalDateTime getLocalDateTimeByString(String format,String localDateTime) {         DateTimeFormatter df = DateTimeFormatter.ofPattern(format);         return LocalDateTime.parse(localDateTime, df);     }      /**      * 获取指定LocalDateTime的秒数      * @param localDateTime      * @return      */     public static Long getSecondByLocalDateTime(LocalDateTime localDateTime) {         return localDateTime.atZone(ZoneId.systemDefault()).toInstant().getEpochSecond();     }      /**      * 获取指定LocalDateTime的毫秒数      * @param localDateTime      * @return      */     public static Long getMillSecondByLocalDateTime(LocalDateTime localDateTime) {         return localDateTime.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();     }      /**      * 将LocalDateTime转化为默认yy-mm-dd hh:mm:ss格式字符串      * @param localDateTime      * @return      */     public static String getDefaultStringByLocalDateTime(LocalDateTime localDateTime,String format) {         return getStringByLocalDateTime(localDateTime, format);     }      /**      * 获取当前LocalDateTime并转化为指定格式字符串      * @param format      * @return      */     public static String getCurrentLocalDateTime(String format) {         return getStringByLocalDateTime(LocalDateTime.now(), format);     }      /**      * 获取一天的开始时间获取一天的开始时间      * @param localDateTime      * @return      */     public static String getStartTime(LocalDateTime localDateTime,String format) {         return getDefaultStringByLocalDateTime(localDateTime.with(LocalTime.MIN),format);     }      /**      * 获取当天的开始时间      * @return      */     public static String getStartTime(String format) {         return getDefaultStringByLocalDateTime(LocalDateTime.now(),format);     }      /**      * 获取一天的结束时间      * @param localDateTime      * @return      */     public static String getEndTime(LocalDateTime localDateTime,String format) {         return getDefaultStringByLocalDateTime(localDateTime.with(LocalTime.MAX),format);     }      /**      * 获取当天的结束时间      * @return      */     public static String getEndTime(String format) {         return getDefaultStringByLocalDateTime(LocalDateTime.now(),format);     }      /**      * 比较两个LocalDateTime的时间大小      * @param localDateTime1      * @param localDateTime2      * @return      */     public static boolean getCompareLocalDateTime(LocalDateTime localDateTime1, LocalDateTime localDateTime2) {         if (localDateTime1.isBefore(localDateTime2)) {             return true;         }         return false;     }      /**      * 计算两个指定格式String日期字符串的时间差(精确到毫秒)      * @param format      * @param time1      * @param time2      * @return      */     public static Long getCompareSecondLocalDateTime(String format ,String time1, String time2) {         System.out.println("接收到的参数为:"+format+","+time1+","+time2);         LocalDateTime localDateTime1 =getLocalDateTimeByString(format,time1);         LocalDateTime localDateTime2 =getLocalDateTimeByString(format,time2);         if(getMillSecondByLocalDateTime(localDateTime1)&gt;getMillSecondByLocalDateTime(localDateTime2)) {             return getMillSecondByLocalDateTime(localDateTime1)-getMillSecondByLocalDateTime(localDateTime2);         }         return getMillSecondByLocalDateTime(localDateTime2)-getMillSecondByLocalDateTime(localDateTime1);     }      /**      * 获取两个LocalDateTime的天数差      * @param localDateTime1      * @param localDateTime2      * @return      */     public static Long getCompareDayLocalDateTime(LocalDateTime localDateTime1, LocalDateTime localDateTime2) {         if (getCompareLocalDateTime(localDateTime1, localDateTime2)) {             Duration duration = Duration.between(localDateTime1, localDateTime2);             return duration.toDays();         } else {             Duration duration = Duration.between(localDateTime2, localDateTime1);             return duration.toDays();         }     }      /**      * 获取两个LocalDateTime的小时差      * @param localDateTime1      * @param localDateTime2      * @return      */     public static Long getCompareYearLocalDateTime(LocalDateTime localDateTime1, LocalDateTime localDateTime2) {         if (getCompareLocalDateTime(localDateTime1, localDateTime2)) {             Duration duration = Duration.between(localDateTime1, localDateTime2);             return duration.toHours();         } else {             Duration duration = Duration.between(localDateTime2, localDateTime1);             return duration.toHours();         }     }      /**      * 判断两个字符串时间相隔的天数，并遍历输出这些字符串时间      *      * @param stime yyyy-MM-dd      * @param etime yyyy-MM-dd      * @return      */     public static List&lt;String&gt; getBetweenDays(String stime, String etime) {         List&lt;String&gt;      dateList = new ArrayList&lt;&gt;();         DateTimeFormatter df       = DateTimeFormatter.ofPattern("yyyy-MM-dd");         LocalDate         sDate    = LocalDate.parse(stime);         LocalDate         eDate    = LocalDate.parse(etime);         //两个日期相差的天数         long day = eDate.toEpochDay() - sDate.toEpochDay();         System.out.println(day);         for (int i = 0; i &lt;= day; i++) {             dateList.add(df.format(eDate.minusDays(i)));         }         return dateList;     }  /**      * 获取两个日期之间的所有月份 (年月)      *      * @param startTime      * @param endTime      * @return：YYYY-MM      */     public static List&lt;String&gt; getMonthBetweenDate(String startTime, String endTime){         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");         // 声明保存日期集合         List&lt;String&gt; list = new ArrayList&lt;String&gt;();         try {             // 转化成日期类型             Date startDate = sdf.parse(startTime);             Date endDate = sdf.parse(endTime);               //用Calendar 进行日期比较判断             Calendar calendar = Calendar.getInstance();             while (startDate.getTime()&lt;=endDate.getTime()){                 // 把日期添加到集合                 list.add(sdf.format(startDate));                 // 设置日期                 calendar.setTime(startDate);                 //把日期增加一天                 calendar.add(Calendar.MONTH, 1);                 // 获取增加后的日期                 startDate=calendar.getTime();             }         } catch (ParseException e) {             e.printStackTrace();         }         return list;     }    /**      * 获取两个时间段的时间段值      * @param startTime 开始时间      * @param endTime 结束时间      * @param typeEnum 时间类型枚举      * @return      */     protected static List&lt;String&gt; getTimePeriodFromTwoTime(Long startTime, Long endTime, TimeTypeEnum typeEnum) {         LocalDate start = Instant.ofEpochMilli(startTime).atZone(ZoneOffset.ofHours(8)).toLocalDate();         LocalDate end = Instant.ofEpochMilli(endTime).atZone(ZoneOffset.ofHours(8)).toLocalDate();          List&lt;String&gt; result = new ArrayList&lt;&gt;();          // 年         if (typeEnum.getType().equals(TimeTypeEnum.YEAR.getType())) {             Year startyear = Year.from(start);             Year endYear = Year.from(end);             // 包含最后一个时间             for (long i = 0; i &lt;= ChronoUnit.YEARS.between(startyear, endYear); i++) {                 result.add(startyear.plusYears(i).toString());             }         }         // 月         else if (TimeTypeEnum.MONTH.getType().equals(typeEnum.getType())) {             YearMonth from = YearMonth.from(start);             YearMonth to = YearMonth.from(end);             for (long i = 0; i &lt;= ChronoUnit.MONTHS.between(from, to); i++) {                 result.add(from.plusMonths(i).toString());             }         }         // 日         else {             for (long i = 0; i &lt;= ChronoUnit.DAYS.between(start, end); i++) {                 result.add(start.plus(i, ChronoUnit.DAYS).toString());             }         }         return result;     }       /**      * 获取当前时间本周开始日期      */     public static String getWeekStart() {         LocalDateTime inputDate = LocalDateTime.now();         DateTimeFormatter df = DateTimeFormatter.ofPattern("yyyy-MM-dd");         TemporalAdjuster FIRST_OF_WEEK =                 TemporalAdjusters.ofDateAdjuster(localDate -&gt; localDate.minusDays(localDate.getDayOfWeek().getValue()- DayOfWeek.MONDAY.getValue()));         String weekStart = df.format(inputDate.with(FIRST_OF_WEEK));         return weekStart;     }      /**      * 获取当前时间本周结束日期      */     public static String getWeekEnd() {         LocalDateTime inputDate = LocalDateTime.now();         DateTimeFormatter df = DateTimeFormatter.ofPattern("yyyy-MM-dd");         TemporalAdjuster LAST_OF_WEEK =                 TemporalAdjusters.ofDateAdjuster(localDate -&gt; localDate.plusDays(DayOfWeek.SUNDAY.getValue() - localDate.getDayOfWeek().getValue()));         String weekEnd = df.format(inputDate.with(LAST_OF_WEEK));         return weekEnd;     }      /**      * 取本月第1天      * @return      */     public static LocalDate firstDayOfThisMonth(){         return LocalDate.now().with(TemporalAdjusters.firstDayOfMonth());     }      /**      * 取本月第n天      * @return      */     public static LocalDate nDayOfThisMonth(int n){         return  LocalDate.now().withDayOfMonth(n);     }      /**      * 取本月最后一天      * @return      */     public static LocalDate lastDayOfThisMonth(){         return  LocalDate.now().with(TemporalAdjusters.lastDayOfMonth());     }      /**      * 取之后多少天      * @return      */     public static LocalDate afterDayOfThisMonth(int n){         return LocalDate.now().plusDays(n);     }      /**      * 判断闰年      * @return      */     public static boolean isLeapYear(){         return LocalDate.now().isLeapYear();     }      /**      * 判断本月天数      * @return      */     public static int days(){         return LocalDate.now().lengthOfMonth();     }      /**      * 判断是本周周几,返回 MONDAY，TUESDAY。。。      * @return      */     public static DayOfWeek getDayOfWeek(){         return LocalDate.now().getDayOfWeek();     }      /**      * 当前日期月份      * @return      */     public static int getMonthValue(){         return LocalDate.now().getMonthValue();     }      /* getYear()    int    获取当前日期的年份         getMonth()    Month    获取当前日期的月份对象         getMonthValue()    int    获取当前日期是第几月         getDayOfWeek()    DayOfWeek    表示该对象表示的日期是星期几         getDayOfMonth()    int    表示该对象表示的日期是这个月第几天         getDayOfYear()    int    表示该对象表示的日期是今年第几天         withYear(int year)    LocalDate    修改当前对象的年份         withMonth(int month)    LocalDate    修改当前对象的月份         withDayOfMonth(int dayOfMonth)    LocalDate    修改当前对象在当月的日期         isLeapYear()    boolean    是否是闰年         lengthOfMonth()    int    这个月有多少天         lengthOfYear()    int    该对象表示的年份有多少天（365或者366）         plusYears(long yearsToAdd)    LocalDate    当前对象增加指定的年份数         plusMonths(long monthsToAdd)    LocalDate    当前对象增加指定的月份数         plusWeeks(long weeksToAdd)    LocalDate    当前对象增加指定的周数         plusDays(long daysToAdd)    LocalDate    当前对象增加指定的天数         minusYears(long yearsToSubtract)    LocalDate    当前对象减去指定的年数         minusMonths(long monthsToSubtract)    LocalDate    当前对象减去注定的月数         minusWeeks(long weeksToSubtract)    LocalDate    当前对象减去指定的周数         minusDays(long daysToSubtract)    LocalDate    当前对象减去指定的天数         compareTo(ChronoLocalDate other)    int    比较当前对象和other对象在时间上的大小，返回值如果为正，则当前对象时间较晚，         isBefore(ChronoLocalDate other)    boolean    比较当前对象日期是否在other对象日期之前         isAfter(ChronoLocalDate other)    boolean    比较当前对象日期是否在other对象日期之后         isEqual(ChronoLocalDate other)    boolean    比较两个日期对象是否相等*/</code></pre> <pre><code class="language-java">/**  * 获取传入时间前n天集合列表  * @param time  * @param n  * @return  */ public static List&lt;String&gt; getBeforeNDays(String time, Integer n) {     DateTimeFormatter df = DateTimeFormatter.ofPattern("yyyy-MM-dd");     LocalDate date = LocalDate.parse(time);     List&lt;String&gt; dateList =  new ArrayList&lt;&gt;();     for(int i=0;i&lt;=n;i++){         dateList.add(df.format(date.minusDays(i)));     }     Collections.reverse(dateList);     return dateList; }  /**  * 获取一年有多少自然周  * @param year  * @return  */ public static int getWeekNumByYear(int year){     //初始化，第一周至少四天     WeekFields wfs = WeekFields.of(DayOfWeek.MONDAY, 4);     //一年最后一天日期的LocalDate，如果该天获得的周数为1或52，那么该年就只有52周，否则就是53周     //获取指定时间所在年的周数     int num= LocalDate.of(year, 12, 31).get(wfs.weekOfWeekBasedYear());     num = num == 1 ? 52 : num;     return num; }  /**  * 获取一年当中第多少周的日期列表  * @param year  * @param num  * @return  */ private static List&lt;String&gt; getDateByYearAndWeekNumAndDayOfWeek(Integer year, Integer num) {     DateTimeFormatter df = DateTimeFormatter.ofPattern("yyyy-MM-dd");     List&lt;String&gt; localDates = new ArrayList&lt;&gt;();     for(int i=1;i&lt;=DayOfWeek.values().length;i++){         //周数小于10在前面补个0         String numStr = num &lt; 10 ? "0" + String.valueOf(num) : String.valueOf(num);         //2019-W01-01获取第一周的周一日期，2019-W02-07获取第二周的周日日期         String weekDate = String.format("%s-W%s-%s", year, numStr, i);         localDates.add(df.format(LocalDate.parse(weekDate, DateTimeFormatter.ISO_WEEK_DATE)));     }     return localDates; }  /**  * 指定年份指定周的前n周(n&lt;52)  * @param year 年份  * @param week 指定周  * @param n 前多少周  * @return 每周对应的时间日期  */ public static List&lt;Map&lt;String,List&lt;String&gt;&gt;&gt; getWeekDateList(int year,int week,int n){     //n&gt;=52,跨了两年，不考虑     if(n&gt;=52){         throw new RuntimeException("周跨度太长");     }     List&lt;Map&lt;String,List&lt;String&gt;&gt;&gt; returnList = new ArrayList&lt;&gt;();     //不涉及跨年     if(week &gt; n){         for(int i = week - n;i &lt;= week;i++){             Map&lt;String,List&lt;String&gt;&gt; map = new HashMap&lt;&gt;();             List&lt;String&gt; localDates = getDateByYearAndWeekNumAndDayOfWeek(year,i);             map.put( year + "第" + i + "周",localDates);             returnList.add(map);         }     }     //跨年     else{         //查询前一年有多少周         int weekNum = getWeekNumByYear(year - 1);         //前一年要计算的周数         int k = n - week + 1;         //前一年的周时间列表         List&lt;String&gt; beforeLocalDates = new ArrayList&lt;&gt;();         //当年的周时间列表         List&lt;String&gt; localDates = new ArrayList&lt;&gt;();         for(int i=weekNum - k + 1;i&lt;=weekNum;i++){             Map&lt;String,List&lt;String&gt;&gt; map = new HashMap&lt;&gt;();             beforeLocalDates =  getDateByYearAndWeekNumAndDayOfWeek(year - 1,i);             map.put( year - 1 + "第" + i + "周",beforeLocalDates);             returnList.add(map);         }         for(int j=1;j&lt;=week;j++){             Map&lt;String,List&lt;String&gt;&gt; map = new HashMap&lt;&gt;();             localDates =  getDateByYearAndWeekNumAndDayOfWeek(year,j);             map.put( year + "第" + j + "周",localDates);             returnList.add(map);         }     }     return returnList; }  /**  * 获取指定月前n个月日期月份集合  * @param year  * @param month  * @return  */ public static List&lt;String&gt; getBeforeNMonth(int year,int month,int n){     List&lt;String&gt; returnList = new ArrayList&lt;&gt;();     DateTimeFormatter df = DateTimeFormatter.ofPattern("yyyy-MM");     LocalDate monthDate = LocalDate.of(year, month,1);     for(int i=0;i&lt;=n;i++){         returnList.add(df.format(monthDate.minusMonths(i))) ;     }     Collections.reverse(returnList);     return returnList; }  /**  * 获取指定季度前n个季度日期季度集合  * @param year 年份  * @param quarter 季度  * @param n 前多少季度  * @return  */ public static List&lt;Map&lt;String,List&lt;String&gt;&gt;&gt; getQuarterDate(int year,int quarter,int n){     if(n &gt; 3){         throw new RuntimeException("季度跨度太长");     }     List&lt;Map&lt;String,List&lt;String&gt;&gt;&gt; returnList = new ArrayList&lt;&gt;();     //不涉及跨年     if(quarter &gt; n){         for(int i = quarter - n;i &lt;= quarter;i++){             Map&lt;String,List&lt;String&gt;&gt; map = new HashMap&lt;&gt;();             List&lt;String&gt; localDates = getQuarterDateByYear(year,i);             map.put( year + "第" + i + "季度",localDates);             returnList.add(map);         }     }     //跨年     else{         //前一年的季度时间列表         List&lt;String&gt; beforeLocalDates = new ArrayList&lt;&gt;();         //当年的季度时间列表         List&lt;String&gt; localDates = new ArrayList&lt;&gt;();         for(int i= quarter + 1;i &lt;= n + 1;i++){             Map&lt;String,List&lt;String&gt;&gt; map = new HashMap&lt;&gt;();             beforeLocalDates =  getQuarterDateByYear(year - 1,i);             map.put( year - 1 + "第" + i + "季度",beforeLocalDates);             returnList.add(map);         }         for(int j=1;j&lt;=quarter;j++){             Map&lt;String,List&lt;String&gt;&gt; map = new HashMap&lt;&gt;();             localDates = getQuarterDateByYear(year,j);             map.put( year + "第" + j + "季度",localDates);             returnList.add(map);         }     }     return returnList; }  /**  * 获取年份季度日期集合  * @param year  * @param quarter  * @return  */ private static List&lt;String&gt; getQuarterDateByYear(int year, int quarter) {     List&lt;String&gt; list = new ArrayList&lt;&gt;();     switch (quarter){         case 1:             list.add(year + "-" + "01");             list.add(year + "-" + "02");             list.add(year + "-" + "03");             break;         case 2:             list.add(year + "-" + "04");             list.add(year + "-" + "05");             list.add(year + "-" + "06");             break;         case 3:             list.add(year + "-" + "07");             list.add(year + "-" + "08");             list.add(year + "-" + "09");             break;         case 4:             list.add(year + "-" + "10");             list.add(year + "-" + "11");             list.add(year + "-" + "12");             break;         default:             break;     }     return list; }  /**  * 获取传入年份的前n年集合，包括传入年份  * @param year  * @param n  * @return  */ public static List&lt;String&gt; getYearList(int year,int n){     List&lt;String&gt; returnList = new ArrayList&lt;&gt;();     for(int i = 0;i &lt;= n;i++){         returnList.add(String.valueOf(year - i));     }     Collections.reverse(returnList);     return returnList; }       public static void main(String[] args) {         System.out.println(getLocalDateTime(new Date()));     } }</code></pre> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-90625.htm">属马的适不适合养猫（属马的可以养猫吗?）</a></p>
                                        <p>下一个：<a href="/news/article-91019.htm">狗粮10大品牌排行榜（狗粮品牌前十名）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-83416.htm" title="C ++中的虚拟基类">C ++中的虚拟基类</a></li>
                        <li class="py-2"><a href="/news/article-87672.htm" title="被猫抓了五天了打疫苗来得及吗（被猫抓了五天了打疫苗来得及吗）">被猫抓了五天了打疫苗来得及吗（被猫抓了五天了打疫苗来得及吗）</a></li>
                        <li class="py-2"><a href="/news/article-87671.htm" title="使用SpringCache进行缓存数据库查询">使用SpringCache进行缓存数据库查询</a></li>
                        <li class="py-2"><a href="/news/article-78530.htm" title="三国杀台词彩蛋（三国杀台词鉴赏）">三国杀台词彩蛋（三国杀台词鉴赏）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-1-latest-winxray-node.htm" title="「4月1日」最高速度21.2M/S，2025年Xray每天更新免费机场订阅节点链接">「4月1日」最高速度21.2M/S，2025年Xray每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-5-winxray-node-github.htm" title="「3月5日」最高速度18.5M/S，2025年Xray每天更新免费机场订阅节点链接">「3月5日」最高速度18.5M/S，2025年Xray每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-89885.htm" title="动物防疫站怎么样上班（动物防疫站工作工资高吗）">动物防疫站怎么样上班（动物防疫站工作工资高吗）</a></li>
                        <li class="py-2"><a href="/news/article-84120.htm" title="C/C++ 缓冲区问题、计时循环和基于范围的for循环">C/C++ 缓冲区问题、计时循环和基于范围的for循环</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-14-node-share-links.htm" title="「3月14日」最高速度19.4M/S，2025年Xray每天更新免费机场订阅节点链接">「3月14日」最高速度19.4M/S，2025年Xray每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-81947.htm" title="动物疫苗价格表图片大全集（动物疫苗价格查询）">动物疫苗价格表图片大全集（动物疫苗价格查询）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">90</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
        <!-- Services Area End -->
    </main>
        <footer>
        <!--? Footer Start-->
        <div class="footer-area section-bg" data-background="/assets/website/img/xraywindows/gallery/footer_bg.jpg">
            <div class="container">
                <div class="footer-bottom">
                    <div class="row d-flex justify-content-between align-items-center">
                        <div class="col-xl-9 col-lg-8">
                            <div class="footer-copy-right">
                                                    <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                                <p>
                                    Xray Windows节点订阅官网 版权所有 Powered by WordPress
                                </p>
                            </div>
                        </div>
                        <div class="col-xl-3 col-lg-4">
                            <!-- Footer Social -->
                            <div class="footer-social f-right">
                                <a href="#"><i class="fab fa-twitter"></i></a>
                                <a href="https://www.facebook.com/sai4ull"><i class="fab fa-facebook-f"></i></a>
                                <a href="#"><i class="fas fa-globe"></i></a>
                                <a href="#"><i class="fab fa-instagram"></i></a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Footer End-->
    </footer>
    <!-- Scroll Up -->
    <div id="back-top">
        <a title="Go to Top" href="#"> <i class="fas fa-level-up-alt"></i></a>
    </div>
    <!-- JS here -->
    <script src="/assets/website/js/frontend/xraywindows/vendor/modernizr-3.5.0.min.js"></script>
    <!-- Jquery, Popper, Bootstrap -->
    <script src="/assets/website/js/frontend/xraywindows/vendor/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/xraywindows/popper.min.js"></script>
    <script src="/assets/website/js/frontend/xraywindows/bootstrap.min.js"></script>
    <!-- Jquery Mobile Menu -->
    <script src="/assets/website/js/frontend/xraywindows/jquery.slicknav.min.js"></script>
    <!-- Jquery Slick , Owl-Carousel Plugins -->
    <script src="/assets/website/js/frontend/xraywindows/owl.carousel.min.js"></script>
    <script src="/assets/website/js/frontend/xraywindows/slick.min.js"></script>
    <!-- One Page, Animated-HeadLin -->
    <script src="/assets/website/js/frontend/xraywindows/wow.min.js"></script>
    <script src="/assets/website/js/frontend/xraywindows/animated.headline.js"></script>
    <script src="/assets/website/js/frontend/xraywindows/jquery.magnific-popup.js"></script>
    <!-- Nice-select, sticky -->
    <script src="/assets/website/js/frontend/xraywindows/jquery.nice-select.min.js"></script>
    <script src="/assets/website/js/frontend/xraywindows/jquery.sticky.js"></script>

    <!-- contact js -->
    <script src="/assets/website/js/frontend/xraywindows/contact.js"></script>
    <script src="/assets/website/js/frontend/xraywindows/jquery.form.js"></script>
    <script src="/assets/website/js/frontend/xraywindows/jquery.validate.min.js"></script>
    <script src="/assets/website/js/frontend/xraywindows/mail-script.js"></script>
    <script src="/assets/website/js/frontend/xraywindows/jquery.ajaxchimp.min.js"></script>
    <!-- Jquery Plugins, main Jquery -->
    <script src="/assets/website/js/frontend/xraywindows/plugins.js"></script>
    <script src="/assets/website/js/frontend/xraywindows/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>